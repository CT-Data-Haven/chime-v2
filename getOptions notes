// save previous getOptions function

var geo;
var condition;

$.getJSON('conditions.json', function(json) {

});

//$('.query-menu').change(function() {

    //geo = $geoMenu.filter(':checked').val();
    //condition = $condMenu.val();

    //var type = $typeMenu.filter(':checked').val();



    /*if (type === 'age_adjusted') {
        $ageMenu.prop('disabled', true);
        age = '_age_adjusted';
    } else {
        $ageMenu.prop('disabled', false);
        age = '_all_ages'; /////////////////////////// temporary for testing
    }*/


    // turn off geo radios
    /*$geoMenu.prop('disabled', true);
    // turn off condition menu options
    $condMenu.children().prop('disabled', true);
    // loop through options, get geos available for each option, if geo is in this array, turn option back on
    $('#conditionMenu option').each(function() {
        var geosForCondition = $(this).data('geo');
        console.log($(this).data('geo'));
        if ($.inArray(geo, geosForCondition) !== -1) {
            $(this).prop('disabled', false);
        }
    });
    // get geos allowed for this condition, turn on allowed geo radios
    $condMenu.find(':selected').data('geo').forEach(function(d) {
        $geoMenu.filter('[value=' + d + ']').prop('disabled', false);
    });*/


    // disable all geo radios, turn on ones included in data-geo of condition menu
    /*$geoMenu.prop('disabled', true);
    $condMenu.find(':selected').data('geo').forEach(function(d) {
        $geoMenu.filter('[value=' + d + ']').prop('disabled', false);
    });
    // disable all select options, turn on ones with geo in their data-geo arrays
    //$condMenu.children().prop('disabled', true);
    $condMenu.find(':selected').each(function() {
        var geoArray = $(this).data('geo');
        console.log(geoArray);
        if ($.inArray(geo, geoArray) !== -1) {
            $(this).prop('disabled', false);
        }
    });

    // same procedure for data-ages
    var ageArray = $condMenu.find(':selected').data('ages');
    $ageMenu.children().prop('disabled', true);
    ageArray.forEach(function(d) {
        $ageMenu.filter('[value=' + d + ']').prop('disabled', false);
    });*/



    // if ages = 0-19 and condition is something other than homicide, set age to all ages
    /*if ($ageMenu.val() === '0_19' & $condMenu.val() !== 'homicide') {
        $ageMenu.val('all_ages');
    }
    // set age after looking at groups
    if ($.inArray('no_age', ageArray)) {
        $ageMenu.prop({'disabled': true,
                       'selectedIndex': 0
        });
        $typeMenu.first().prop('checked', true); // reset to first radio button when no_age chosen

        age = '';
        $('.age-slider').slideUp();
    } else if (type === 'age_adjusted') {
        $ageMenu.prop('disabled', true);
        age = '_age_adjusted';
        $('.age-slider').slideDown();
    } else {
        // if grouped age, turn off all age groups, turn ones from groupArr back on
        $ageMenu.prop('disabled', false);
        $ageMenu.children().prop('disabled', true);
        $ageMenu.children().filter(function(i) {
            if ($.inArray($(this).val(), groupArr) > -1) { // if value of this option is in groupArr
                $(this).prop('disabled', false);
            }
        });
        age = '_' + $ageMenu.val();
        $('.age-slider').slideDown();
    }*/

    // build strings for heading
    // replace first underscore with space, replace second with hyphen
    ageStr = age.length > 0 ? ', ' + age.replace('_', '').replace(/_(?=\d)/, '-').replace('_', ' ') : ''; //age.replace(/_/, ' ').replace(/_/, '-') : '';
    //var ageStr = age.replace(/_/, ' ').replace(/_/, '-');
    $('.age-heading').text(ageStr);
    var conditionStr = $condMenu.find('option:selected').text();
    $('.indicator-heading').text(conditionStr);
    // encounter type string, only if data-hosp exists
    //var hosp = $condMenu.find(':selected').data('hosp');
    //var hospStr = hosp ? ' per 10,000 residents, ' + hosp.replace(/_/, ' ') : '';
    //$('#hosp-head').text(hospStr);
    // add class .definition-show to display definition based on value of condition
    $('.definition').addClass('hidden'); // clear current definition
    $('#def-' + condition).removeClass('hidden');

    var column = condition + age;

    updateQuery(geo, column);
//});
// trigger change on one element
$('.query-menu').eq(0).change();
